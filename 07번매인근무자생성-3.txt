<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>와룡운수 종로 07번 근무현황표</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 10px;
            background-color: #f4f4f4; color: #333;
            font-size: 14pt;
        }
        .controls {
            background-color: #fff;
            padding: 15px; border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 15px;
            display: flex; flex-wrap: wrap; gap: 10px;
            align-items: center;
        }
        .controls label { font-weight: bold; margin-right: 5px; }
        .controls input[type="number"], .controls select {
            padding: 6px;
            border: 1px solid #ddd; border-radius: 4px;
            width: 70px; box-sizing: border-box;
        }
        /* ✅ 인쇄 옵션 셀렉트 박스 너비 조정 */
        .controls select.margin-select {
            width: 55px; /* 작은 크기로 조정 */
            padding: 1px 3px; /* 작은 크기로 조정 */
            font-size: 0.9em;
        }
        /* ✅ 새로운 근무표 관리 옵션 셀렉트 박스 스타일 (요청하신 눈에 띄는 색상 적용) */
        .controls select.action-select {
            padding: 8px 15px;
            font-size: 17.5px;
            background-color: #28a745; /* 밝은녹색 */
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
            width: auto;
        }
        /* ✅ 관련 서비스 이동 셀렉트 박스 너비 조정 */
        .controls select.service-select {
            padding: 8px 15px; /* 버튼과 유사하게 */
            font-size: 17.5px;
            background-color: #17a2b8; /* 기존 링크 버튼 색상 */
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
            width: auto; /* 내용에 맞춰 너비 자동 조절 */
        }
        .controls input[type="radio"] { margin-left: 10px; }
        .controls button, .controls a.button-link {
            padding: 8px 15px;
            color: white; border: none; border-radius: 4px;
            cursor: pointer; font-size: 17.5px; margin-right: 8px;
            text-decoration: none; display: inline-block; text-align: center; white-space: nowrap;
        }
        .controls button { background-color: #007bff; }
        .controls button:hover { background-color: #0056b3; }
        /* 기존의 고정초기화, 백업/복구 버튼 스타일은 이제 action-select에 통합되어 사용되지 않습니다. */
        
        #scheduleContainer {
            background-color: white;
            padding: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin: 20px auto; max-width: 95%; overflow-x: auto;
        }
        table {
            width: 100%;
            min-width: 1200px; border-collapse: collapse;
            margin: 0 auto; font-size: 0.9em; background-color: #fff; table-layout: fixed;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 6px; text-align: center;
            vertical-align: top; line-height: 1.1; word-break: keep-all;
            height: 38px; box-sizing: border-box;
            font-size: 13pt;
        }
        th { background-color: #f2f2f2; font-weight: bold; }
        caption {
            font-size: 1.5em;
            margin-bottom: 10px; font-weight: bold;
            color: #333; text-decoration: underline;
        }
        .sunday { background-color: #ffe0e0; }
        .saturday { background-color: #e0e0ff; }
        .holiday { background-color: #ffcccc; font-weight: bold; color: #cc0000; }
        .edit-mode {
            position: relative;
            padding: 2px; display: flex; flex-direction: column;
            justify-content: center; height: 100%;
        }
        .edit-mode input {
            width: calc(100% - 8px);
            margin-bottom: 2px;
            padding: 2px; box-sizing: border-box;
        }
        .edit-mode .cell-buttons { display: flex;
            justify-content: space-around; margin-top: 2px; }
        .edit-mode .cell-buttons button {
            padding: 3px 5px;
            font-size: 0.7em; color: white; border: none;
            border-radius: 3px; cursor: pointer; white-space: nowrap;
        }
        .edit-mode .cell-buttons button.btn-fixed { background-color: #28a745; }
        .edit-mode .cell-buttons button.btn-temp { background-color: #ffc107; }
        .edit-mode .cell-buttons button.btn-highlight-am { background-color: #ff8c00; }
        .edit-mode .cell-buttons button.btn-highlight-pm { background-color: #ff8c00; }
        .edit-mode button:disabled { cursor: not-allowed; opacity: 0.6; }
        .edit-mode .cell-buttons button.btn-delete { background-color: #dc3545; }

        .name-entry { display: block; margin-top: 2px; margin-bottom: 2px; }
        .name-entry.bold-name { font-weight: bold; }
        .hidden-x {
            color: white;
        }
        table th:nth-child(1),
        table td:nth-child(1),
        table th:nth-child(2),
        table td:nth-child(2) {
            width: 4%;
            min-width: 60px;
        }
        
        @media print {
            @page {
                size: A4;
                /* ✅ CSS 변수를 사용하여 여백 설정 */
                margin: 10mm; 
                margin-left: var(--print-margin-left, 15mm); 
                margin-right: var(--print-margin-right, 5mm);
            }
            body {
                background-color: white;
                margin: 0; padding: 0;
                -webkit-print-color-adjust: exact;
            }
            .controls { display: none; }
            #scheduleContainer { box-shadow: none; margin: 0; padding: 0; }
            table {
                width: 100%;
                min-width: unset;
                font-size: 0.8em;
                border: 1px solid #000;
                table-layout: fixed;
            }
            th, td { padding: 1px; height: auto;
                word-break: break-all; }

            table th:nth-child(1),
            table td:nth-child(1),
            table th:nth-child(2),
            table td:nth-child(2) {
                width: 4%;
            }
        }
        @media screen and (max-width: 768px) {
            .controls { flex-direction: column;
                align-items: stretch; }
            .controls input[type="number"], .controls select, .controls button, .controls a.button-link { width: 100%;
                box-sizing: border-box; margin: 5px 0; }
            .controls select.service-select, .controls select.action-select { width: 100%; }
            #scheduleContainer { padding: 5px; }
            table { font-size: 0.8em; }
            th, td { padding: 4px; }
        }
    </style>
</head>
<body>
    <div class="controls">
        <label for="yearInput">년도:</label>
        <input type="number" id="yearInput">
        <label for="monthInput">월:</label>
        <input type="number" id="monthInput">
        
        <input type="radio" id="option1" name="displayOption" value="1">
        <label for="option1">1일 ~ 15일</label>
        <input type="radio" id="option2" name="displayOption" value="2">
        <label for="option2">16일 ~ 말일</label>
        
        <button onclick="generateSchedule()">생성</button>
        <button onclick="calculateWorkdays()">07번 근무일수계산</button>
        
        <div style="display: flex; align-items: center; gap: 5px; margin-left: 10px;">
            <button onclick="printPage()">인쇄</button>
            <div style="display: flex; flex-direction: column; gap: 2px;">
                <div style="display: flex; align-items: center; gap: 3px; font-size: 0.9em; height: 18px;">
                    <label for="marginLeftSelect">좌측여백:</label>
                    <select id="marginLeftSelect" class="margin-select" style="width: 55px; padding: 1px 3px; font-size: 0.9em;">
                        <option value="0">0</option>
                        <option value="10" selected>10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                        <option value="40">40</option>
                    </select>
                </div>
                <div style="display: flex; align-items: center; gap: 3px; font-size: 0.9em; height: 18px;">
                    <label for="marginRightSelect">우측여백:</label>
                    <select id="marginRightSelect" class="margin-select" style="width: 55px; padding: 1px 3px; font-size: 0.9em;">
                        <option value="0">0</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                        <option value="40">40</option>
                    </select>
                </div>
            </div>
        </div>
        
        <select id="scheduleActionsSelect" class="action-select" onchange="handleScheduleActions()">
            <option value="">근무표 관리 옵션</option>
            <option value="reset">전체 고정 초기화</option>
            <option value="backup">07번 근무 백업 다운</option>
            <option value="restore">07번 근무 복구 업로드</option>
        </select>
        <input type="file" id="restoreFile" style="display: none;" onchange="restoreScheduleData(this.files[0])" accept=".json">


        <select id="serviceSelect" class="service-select" onchange="navigateService()">
            <option value="">관련 서비스 이동</option>
            <option value="https://waryong2025.github.io/townbus/">08번배차표</option>
            <option value="https://waryong2025.github.io/timeman/">07번배차표</option>
            <option value="https://waryong2025.github.io/main/">08번근무현황표</option>
            <option value="https://waryong2025.github.io/testtime">3-2번근무현황표</option>
        </select>
    </div>
    <div id="scheduleContainer">
        <table>
            <caption id="tableCaption"></caption>
            <thead id="scheduleHeader"></thead>
            <tbody id="scheduleBody"></tbody>
        </table>
    </div>

    <script>
        const VEHICLE_COLUMNS = ['3613', '5536', '5537', '3612', '5518', '비고'];
        const STORAGE_KEY_FIXED = 'jongro07FixedSchedule_v3';
        const STORAGE_KEY_TEMP = 'jongro07TempSchedule_v3';

        let fixedScheduleData = JSON.parse(localStorage.getItem(STORAGE_KEY_FIXED)) || {};
        let tempScheduleData = JSON.parse(localStorage.getItem(STORAGE_KEY_TEMP)) || {};
        let scheduleData = {};

        function getDayName(dayOfWeek) {
            return ['일', '월', '화', '수', '목', '금', '토'][dayOfWeek];
        }

        // 2025년 법정공휴일 정보
        function getPublicHoliday(date) {
            const month = date.getMonth() + 1;
            const day = date.getDate();

            const holidays = [
                { month: 1, day: 1, name: '신정' },
                { month: 1, day: 28, name: '설날' },
                { month: 1, day: 29, name: '설날' },
                { month: 1, day: 30, name: '설날' },
                { month: 3, day: 1, name: '삼일절' },
                { month: 5, day: 5, name: '어린이날' },
                { month: 5, day: 6, name: '대체공휴일 (부처님오신날)' },
                { month: 6, day: 6, name: '현충일' },
                { month: 8, day: 15, name: '광복절' },
                { month: 10, day: 3, name: '개천절' },
                { month: 10, day: 6, name: '추석' },
                { month: 10, day: 7, name: '추석' },
                { month: 10, day: 8, name: '대체공휴일 (추석)' },
                { month: 10, day: 9, name: '한글날' },
                { month: 12, day: 25, name: '성탄절' }
            ];

            const holiday = holidays.find(h => h.month === month && h.day === day);
            return holiday ? holiday.name : null;
        }

        function renderCellContent(names) {
            if (!names || names.length === 0) return '';
            return names.map(item => {
                const text = item.text.trim();
                const display = text === '' ? '.' : text;
                const hiddenClass = text === '' ? ' hidden-x' : '';
                return `<span class="name-entry${hiddenClass} ${item.bold ? 'bold-name' : ''}">${display}</span>`;
            }).join('');
        }
        
        function editCell(cell, colId, dateString, dayOfWeek) {
            if (cell.classList.contains('edit-mode')) return;

            const existingEditCell = document.querySelector('.edit-mode');
            if (existingEditCell) {
                const prevColId = existingEditCell.dataset.colId;
                const prevDateString = existingEditCell.dataset.dateString;
                const originalNames = scheduleData[prevDateString]?.[prevColId] || [{ text: '', bold: false }, { text: '', bold: false }];
                existingEditCell.classList.remove('edit-mode');
                existingEditCell.innerHTML = renderCellContent(originalNames);
            }

            const currentNames = scheduleData[dateString]?.[colId] || [{ text: '', bold: false }, { text: '', bold: false }];
            const morningValue = currentNames[0]?.text || '';
            const afternoonValue = currentNames[1]?.text || '';
            const isSunday = dayOfWeek === 0;

            cell.classList.add('edit-mode');
            cell.dataset.colId = colId;
            cell.dataset.dateString = dateString;
            cell.dataset.dayOfWeek = dayOfWeek;
            cell.innerHTML = `
                <input type="text" class="morning-input" value="${morningValue}" placeholder="오전" data-bold="${currentNames[0].bold}">
                <input type="text" class="afternoon-input" value="${afternoonValue}" placeholder="오후" data-bold="${currentNames[1].bold}">
                <div class="cell-buttons">
                    <button class="btn-fixed" onclick="saveFixedCell(this.parentNode.parentNode)" ${isSunday ? 'disabled title="일요일은 고정 저장이 불가능합니다."' : ''}>고정</button>
                    <button class="btn-temp" onclick="saveTempCell(this.parentNode.parentNode)">임시</button>
                    <button class="btn-highlight-am" onclick="highlightCell(this.parentNode.parentNode, 'am')">오전 강조</button>
                    <button class="btn-highlight-pm" onclick="highlightCell(this.parentNode.parentNode, 'pm')">오후 강조</button>
                    <button class="btn-delete" onclick="deleteCell(this.parentNode.parentNode)">삭제</button>
                </div>
            `;
            cell.querySelector('.morning-input').focus();
        }
        
        function getNamesAndBoldStateFromCell(cellElement) {
            const morningInput = cellElement.querySelector('.morning-input');
            const afternoonInput = cellElement.querySelector('.afternoon-input');
            return [
                { text: morningInput.value.trim(), bold: morningInput.dataset.bold === 'true' },
                { text: afternoonInput.value.trim(), bold: afternoonInput.dataset.bold === 'true' }
            ];
        }
        
        function highlightCell(cellElement, timeOfDay) {
            const inputElement = (timeOfDay === 'am') 
                ? cellElement.querySelector('.morning-input') 
                : cellElement.querySelector('.afternoon-input');
            if (inputElement) {
                const isCurrentlyBold = inputElement.dataset.bold === 'true';
                inputElement.dataset.bold = !isCurrentlyBold;
                inputElement.style.fontWeight = !isCurrentlyBold ? 'bold' : 'normal';
            }
        }

        function saveFixedCell(cellElement) {
            const { colId, dayOfWeek, dateString } = cellElement.dataset;
            if (dayOfWeek === '0') {
                alert('일요일은 고정 저장이 불가능합니다.');
                return;
            }
            
            const namesToSave = getNamesAndBoldStateFromCell(cellElement);
            const recurringKey = `${dayOfWeek}-${colId}`;

            if (!fixedScheduleData[recurringKey]) {
                fixedScheduleData[recurringKey] = [];
            }
            
            fixedScheduleData[recurringKey] = fixedScheduleData[recurringKey].filter(entry => entry.anchorDate !== dateString);
            fixedScheduleData[recurringKey].push({ anchorDate: dateString, names: namesToSave });
            fixedScheduleData[recurringKey].sort((a, b) => new Date(b.anchorDate) - new Date(a.anchorDate));

            localStorage.setItem(STORAGE_KEY_FIXED, JSON.stringify(fixedScheduleData));
            generateSchedule();
        }
        
        function saveTempCell(cellElement) {
            const { colId, dateString } = cellElement.dataset;
            const namesToSave = getNamesAndBoldStateFromCell(cellElement);
            if (!tempScheduleData[dateString]) tempScheduleData[dateString] = {};
            tempScheduleData[dateString][colId] = namesToSave;
            localStorage.setItem(STORAGE_KEY_TEMP, JSON.stringify(tempScheduleData));
            generateSchedule();
        }
        
        function deleteCell(cellElement) {
            const { colId, dayOfWeek, dateString } = cellElement.dataset;

            if (tempScheduleData[dateString]?.[colId]) {
                delete tempScheduleData[dateString][colId];
                if (Object.keys(tempScheduleData[dateString]).length === 0) {
                    delete tempScheduleData[dateString];
                }
                localStorage.setItem(STORAGE_KEY_TEMP, JSON.stringify(tempScheduleData));
            }

            const recurringKey = `${dayOfWeek}-${colId}`;
            if (fixedScheduleData[recurringKey]) {
                const blankNames = [{ text: '', bold: false }, { text: '', bold: false }];
                fixedScheduleData[recurringKey] = fixedScheduleData[recurringKey].filter(entry => entry.anchorDate !== dateString);
                fixedScheduleData[recurringKey].push({ anchorDate: dateString, names: blankNames });
                fixedScheduleData[recurringKey].sort((a, b) => new Date(b.anchorDate) - new Date(a.anchorDate));
                localStorage.setItem(STORAGE_KEY_FIXED, JSON.stringify(fixedScheduleData));
            }
            
            generateSchedule();
        }
        
        function resetAllFixedSchedules() {
            if (prompt("저장된 모든 고정 근무표를 삭제하시려면 비밀번호를 입력하세요.") === "201023") {
                if (confirm("모든 고정 근무표를 삭제합니다. 계속하시겠습니까?")) {
                    fixedScheduleData = {};
                    localStorage.removeItem(STORAGE_KEY_FIXED);
                    if (confirm("임시 근무표도 함께 초기화하시겠습니까?")) {
                        tempScheduleData = {};
                        localStorage.removeItem(STORAGE_KEY_TEMP);
                    }
                    generateSchedule();
                    alert("모든 근무표가 초기화되었습니다.");
                }
            } else {
                alert("비밀번호 확인 후 신청하세요.");
            }
        }

        function getScheduleForDay(currentDate) {
            const dateString = currentDate.toISOString().slice(0, 10);
            const dayOfWeek = currentDate.getDay();
            const dailySchedule = {};

            VEHICLE_COLUMNS.forEach(colId => {
                let names = null;

                if (tempScheduleData[dateString]?.[colId]) {
                    names = tempScheduleData[dateString][colId];
                } 
                else if (getPublicHoliday(new Date(currentDate))) {
                    names = [{ text: '', bold: false }, { text: '', bold: false }];
                }
                else {
                    const recurringKey = `${dayOfWeek}-${colId}`;
                    const rules = fixedScheduleData[recurringKey];
                    if (rules && rules.length > 0) {
                        const applicableRule = rules.find(rule => new Date(rule.anchorDate) <= currentDate);
                        if (applicableRule) {
                            const anchorDate = new Date(applicableRule.anchorDate);
                            const tempCurrentDate = new Date(currentDate);
                            tempCurrentDate.setHours(0, 0, 0, 0);
                            anchorDate.setHours(0, 0, 0, 0);

                            const diffWeeks = Math.floor((tempCurrentDate - anchorDate) / (1000 * 60 * 60 * 24 * 7));

                            if (Math.abs(diffWeeks % 2) === 1) {
                                names = [applicableRule.names[1], applicableRule.names[0]];
                            } else {
                                names = applicableRule.names;
                            }
                        }
                    }
                }

                dailySchedule[colId] = names || [{ text: '', bold: false }, { text: '', bold: false }];
            });
            return dailySchedule;
        }

        function generateSchedule() {
            const year = parseInt(document.getElementById('yearInput').value);
            const month = parseInt(document.getElementById('monthInput').value);
            const selectedOption = document.querySelector('input[name="displayOption"]:checked').value;
            
            const scheduleHeader = document.getElementById('scheduleHeader');
            const scheduleBody = document.getElementById('scheduleBody');
            const tableCaption = document.getElementById('tableCaption');
            
            scheduleHeader.innerHTML = `<tr><th>월일</th><th>요일</th>${VEHICLE_COLUMNS.map(c => `<th>${c}</th>`).join('')}</tr>`;
            scheduleBody.innerHTML = '';
            
            const startDateNum = selectedOption === '1' ? 1 : 16;
            const startDate = new Date(year, month - 1, startDateNum);
            const endDate = (selectedOption === '1') ? new Date(year, month - 1, 15) : new Date(year, month, 0);
            
            tableCaption.textContent = `종로 07번 ${year}년 ${month}월 ${startDate.getDate()}일 ~ ${endDate.getDate()}일까지 근무현황표`;
            
            scheduleData = {};

            for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                const currentDate = new Date(d);
                const dateString = currentDate.toISOString().slice(0, 10);
                const dayOfWeek = currentDate.getDay();
                
                const cellsContent = getScheduleForDay(currentDate);
                scheduleData[dateString] = cellsContent;
                
                let rowClass = '';
                if (getPublicHoliday(currentDate)) {
                    rowClass = 'holiday';
                } else if (dayOfWeek === 0) {
                    rowClass = 'sunday';
                } else if (dayOfWeek === 6) {
                    rowClass = 'saturday';
                }

                const dataCellsHTML = VEHICLE_COLUMNS.map(colId =>
                    `<td onclick="editCell(this, '${colId}', '${dateString}', ${dayOfWeek})">${renderCellContent(cellsContent[colId])}</td>`
                ).join('');

                scheduleBody.insertAdjacentHTML('beforeend', `
                    <tr class="${rowClass}">
                        <td>${currentDate.getDate()}</td>
                        <td>${getDayName(dayOfWeek)}</td>
                        ${dataCellsHTML}
                    </tr>`);
            }
        }

        function calculateWorkdays() {
            const year = parseInt(document.getElementById('yearInput').value);
            const month = parseInt(document.getElementById('monthInput').value);
            
            const workdayCounts = {};
            const shiftCounts = {};
            
            const startDate = new Date(year, month - 1, 1);
            const endDate = new Date(year, month, 0);

            for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                const dailySchedule = getScheduleForDay(new Date(d));
                const dayWorkdays = new Set();

                for (const colId in dailySchedule) {
                    if (colId !== '비고') {
                        dailySchedule[colId].forEach((item, index) => {
                            const name = item.text.trim();
                            if (name) {
                                shiftCounts[name] = shiftCounts[name] || { 오전: 0, 오후: 0 };
                                if (index === 0) shiftCounts[name].오전++;
                                else shiftCounts[name].오후++;
                                dayWorkdays.add(name);
                            }
                        });
                    }
                }
                dayWorkdays.forEach(name => {
                    workdayCounts[name] = (workdayCounts[name] || 0) + 1;
                });
            }
            
            const combinedData = Object.keys(workdayCounts).map(name => ({
                name: name,
                workdays: workdayCounts[name],
                morningShifts: shiftCounts[name]?.오전 || 0,
                afternoonShifts: shiftCounts[name]?.오후 || 0
            })).sort((a, b) => b.workdays - a.workdays);

            const title = `${year}년 ${month}월 근무일수`;
            const tableHTML = `
                <table style="width:100%; border-collapse:collapse;">
                    <thead><tr><th style="padding:8px; border:1px solid #ddd;">이름</th><th style="padding:8px; border:1px solid #ddd;">오전</th><th style="padding:8px; border:1px solid #ddd;">오후</th><th style="padding:8px; border:1px solid #ddd;">총 근무일수</th></tr></thead>
                    <tbody>${combinedData.map(data => `<tr><td style="padding:8px; border:1px solid #ddd;">${data.name}</td><td style="padding:8px; border:1px solid #ddd;">${data.morningShifts}일</td><td style="padding:8px; border:1px solid #ddd;">${data.afternoonShifts}일</td><td style="padding:8px; border:1px solid #ddd;">${data.workdays}일</td></tr>`).join('')}</tbody>
                </table>`;

            const newWindow = window.open('', '_blank', 'width=600,height=400');
            newWindow.document.write(`<html><head><title>${title}</title><style>body{font-family:Arial,sans-serif;margin:20px}h3{text-align:center}table{width:100%;border-collapse:collapse;margin-top:20px}th,td{border:1px solid #ddd;padding:10px;text-align:center}th{background-color:#f2f2f2}.print-button{display:block;width:100px;margin:20px auto;padding:10px;background-color:#007bff;color:white;border:none;cursor:pointer;border-radius:5px}@media print{.print-button{display:none}}</style></head><body><h3>${title}</h3>${tableHTML}<button class="print-button" onclick="window.print()">인쇄</button></body></html>`);
            newWindow.document.close();
        }

        function printPage() {
            // 인쇄 전 편집 모드 해제
            const editCell = document.querySelector('.edit-mode');
            if (editCell) {
                const { colId, dateString } = editCell.dataset;
                const originalNames = scheduleData[dateString]?.[colId] || [{ text: '', bold: false }, { text: '', bold: false }];
                editCell.classList.remove('edit-mode');
                editCell.innerHTML = renderCellContent(originalNames);
            }

            // ✅ 여백 옵션 값을 가져와 CSS 변수로 설정
            const marginLeft = document.getElementById('marginLeftSelect').value;
            const marginRight = document.getElementById('marginRightSelect').value;
            
            document.documentElement.style.setProperty('--print-margin-left', `${marginLeft}mm`);
            document.documentElement.style.setProperty('--print-margin-right', `${marginRight}mm`);

            // 파일명 처리를 위한 제목 설정
            const originalTitle = document.title;
            const captionText = document.getElementById('tableCaption').textContent;
            
            const matches = captionText.match(/(\d{4})년 (\d{1,2})월 (\d{1,2})일 ~ (\d{1,2})일/);

            let newTitle = "종로07번 근무현황표"; 
            if (matches) {
                const year = matches[1];
                const month = matches[2].padStart(2, '0');
                const startDay = matches[3].padStart(2, '0');
                const endDay = matches[4].padStart(2, '0');
                newTitle = `종로07번 ${year}-${month} (${startDay}일-${endDay}일)`;
            }

            // ✅ 인쇄 후 제목을 원래대로, CSS 변수 초기화
            const handleAfterPrint = () => {
                document.title = originalTitle;
                document.documentElement.style.removeProperty('--print-margin-left');
                document.documentElement.style.removeProperty('--print-margin-right');
                window.removeEventListener('afterprint', handleAfterPrint);
            };
            window.addEventListener('afterprint', handleAfterPrint);

            // 인쇄 직전에 제목 변경
            document.title = newTitle;
            window.print();
        }

        // ✅ 관련 서비스 이동 함수 (변동 없음)
        function navigateService() {
            const selectElement = document.getElementById('serviceSelect');
            const url = selectElement.value;
            if (url) {
                window.open(url, '_blank');
                // 이동 후 옵션을 초기화하여 사용자가 다시 선택할 수 있도록 함
                selectElement.value = ''; 
            }
        }


        // --- 백업 다운로드 함수 (변동 없음) ---
        function backupScheduleData() {
            const dataToSave = {
                fixedSchedule: fixedScheduleData,
                tempSchedule: tempScheduleData,
                storageKeys: {
                    fixed: STORAGE_KEY_FIXED,
                    temp: STORAGE_KEY_TEMP
                }
            };

            // JSON 문자열의 공백을 제거하여 압축 (Minification)
            const dataStr = JSON.stringify(dataToSave); 
            
            // 파일 형식을 JSON으로 변경
            const blob = new Blob([dataStr], { type: 'application/json;charset=utf-8' }); 
            
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');

            // 파일 확장자를 .json으로 변경
            const fileName = `종로07_근무표_백업_v3_${year}${month}${day}_${hours}${minutes}.json`;
            
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = fileName; 
            
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            alert(`근무표 백업 데이터 파일 (${fileName})이 다운로드 폴더에 JSON 파일로 저장됩니다.`);
        }
        // ----------------------------------------------------------------

        // --- 백업 복구 (업로드) 함수 (변동 없음) ---
        function restoreScheduleData(file) {
            if (!file) {
                return;
            }
            
            if (!confirm(`[${file.name}] 파일을 업로드하여 저장된 07번 근무표를 복구하시겠습니까? (현재 데이터는 덮어쓰여집니다.)`)) {
                document.getElementById('restoreFile').value = ''; // 취소 시 파일 선택 초기화
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                try {
                    const loadedData = JSON.parse(event.target.result);
                    
                    if (!loadedData.fixedSchedule || !loadedData.tempSchedule) {
                        alert('파일 형식이 올바르지 않거나 데이터가 부족합니다. 백업 파일이 맞는지 확인해주세요.');
                        document.getElementById('restoreFile').value = '';
                        return;
                    }

                    // 데이터 키 확인 (선택 사항이지만 안전을 위해)
                    if (loadedData.storageKeys?.fixed && loadedData.storageKeys.fixed !== STORAGE_KEY_FIXED) {
                        if (!confirm(`경고: 이 파일은 다른 버전의 근무표 데이터일 수 있습니다. (키: ${loadedData.storageKeys.fixed}). 강제로 복구하시겠습니까?`)) {
                            document.getElementById('restoreFile').value = '';
                            return;
                        }
                    }

                    // 데이터 복구 (localStorage에 저장)
                    fixedScheduleData = loadedData.fixedSchedule;
                    tempScheduleData = loadedData.tempSchedule;
                    localStorage.setItem(STORAGE_KEY_FIXED, JSON.stringify(fixedScheduleData));
                    localStorage.setItem(STORAGE_KEY_TEMP, JSON.stringify(tempScheduleData));
                    
                    // UI 업데이트 및 알림
                    generateSchedule();
                    alert(`[${file.name}] 파일로부터 근무표 데이터 복구를 완료했습니다. 화면을 확인해주세요.`);
                    document.getElementById('restoreFile').value = ''; // 파일 선택 초기화

                } catch (e) {
                    alert('파일을 읽는 도중 오류가 발생했습니다. 파일이 손상되었거나 JSON 형식이 아닙니다.');
                    console.error('Restore Error:', e);
                    document.getElementById('restoreFile').value = '';
                }
            };
            reader.onerror = function() {
                alert('파일을 읽을 수 없습니다.');
                document.getElementById('restoreFile').value = '';
            };
            
            reader.readAsText(file);
        }
        // ----------------------------------------------------------------

        // ✅ 통합된 근무표 관리 옵션 핸들러 함수 추가
        function handleScheduleActions() {
            const selectElement = document.getElementById('scheduleActionsSelect');
            const action = selectElement.value;
            
            if (action === 'reset') {
                resetAllFixedSchedules();
            } else if (action === 'backup') {
                backupScheduleData();
            } else if (action === 'restore') {
                // 숨겨진 파일 입력 필드를 클릭하여 파일 선택 창을 띄웁니다.
                document.getElementById('restoreFile').click();
            }
            
            // 작업을 수행한 후, 셀렉트 박스를 기본 옵션으로 초기화
            selectElement.value = ''; 
        }
        
        function closeModal() {
            document.getElementById('workdayModal').style.display = 'none';
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date();
            document.getElementById('yearInput').value = today.getFullYear();
            document.getElementById('monthInput').value = today.getMonth() + 1;
            document.getElementById(today.getDate() <= 15 ? 'option1' : 'option2').checked = true;
            generateSchedule();
        });
    </script>
</body>
</html>